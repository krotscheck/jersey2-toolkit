#parse( "scripts.vm" )

$h1 jersey2-toolkit

[![Build Status](https://travis-ci.org/krotscheck/jersey2-toolkit.svg)](https://travis-ci.org/krotscheck/jersey2-toolkit)
[![Coverage Status](https://coveralls.io/repos/krotscheck/jersey2-toolkit/badge.svg)](https://coveralls.io/r/krotscheck/jersey2-toolkit)
[![Maven Central](https://maven-badges.herokuapp.com/maven-central/net.krotscheck.jersey2/jersey2-toolkit/badge.svg)](https://maven-badges.herokuapp.com/maven-central/net.krotscheck.jersey2/jersey2-toolkit)

<span class="lead">${project.description}</span>

This project contains a collection of mix-and-match Jersey2 Features which can 
enhance and accelerate your web service development. Features can be loaded 
wholesale, or can be assembled on an as-needed basis. 

#dependency("jersey2-toolkit")

---

$h2 Basic Usage

Each feature is a distinct submodule, to isolate dependencies. Each submodule 
contains one feature class which includes all components of that feature, which
may be used as follows:

	import net.krotscheck.jersey2.hibernate.HibernateFeature;
	import org.glassfish.jersey.server.ResourceConfig;

	public class YourApplication extends ResourceConfig {
	    public YourApplication() {
	        register(HibernateFeature.class);
	    }
	}

$h2 Advanced Usage

In all cases, each component is dependent on an injection chain from the other 
components, and is kept relatively isolated. Furthermore, every component 
injector contains a public internal class called <code>Binder</code> which 
may be used to construct your own feature. Therefore, if you have a custom 
implementation of a particular component that you would rather use, or you 
would like to exclude some feature, you may construct your own as follows:

    public final class CustomHibernateFeature implements Feature {
    
        @Override
        public boolean configure(final FeatureContext context) {
            // Custom Binders
            context.register(new MyCustomSessionFactoryFactory.Binder());
    
            // Library Provided Binders
            context.register(new HibernateSessionFactory.Binder());
            context.register(new HibernateConfigurationFactory.Binder());
    
            // Disable search indexing
            // context.register(new FulltextSearchFactoryFactory.Binder());
            // context.register(new FulltextSessionFactory.Binder());
            // context.register(new SearchIndexContextListener.Binder());
    
            return true;
        }
    }
        
---

Available features:

#foreach ($collectedProject in $project.collectedProjects)

[$collectedProject.name](${collectedProject.name}.html)<br/>$collectedProject.description



#end