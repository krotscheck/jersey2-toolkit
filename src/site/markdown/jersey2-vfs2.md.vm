#parse( "scripts.vm" )
#set($moduleName = "jersey2-vfs2")

#header($moduleName)

This library provides HK2 injectors and container lifecycle components for 
Apache's Commons Virtual File System. This feature **does not** include 
filesystem adapters, though you can add any that you wish by using VFS2's 
[xml configuration](http://commons.apache.org/proper/commons-vfs/api.html).

#dependency($moduleName)

$h2 Quickstart

First, register the feature in your application in accordance with the 
[Jersey2 Application Model](https://jersey.java.net/documentation/latest/deployment.html#environmenmt.appmodel).

	import net.krotscheck.jersey2.vfs2.VFS2Feature;
	import org.glassfish.jersey.server.ResourceConfig;

	public class YourApplication extends ResourceConfig {
	    public YourApplication() {
	        register(VFS2Feature.class);
	    }
	}

Second, inject the VFS FileSystemManager into your service.


    @Path("/path")
    public class MyService {
    
        @Inject
        public FileSystemManager fsManager;
    
        @GET
        @Produces(MediaType.APPLICATION_JSON)
        public Response getMethod() {
            return Response.ok().build();
        }
    }

The FileSystemManager is provided within the singleton scope. Actual FileObjects
are attached to a VFS FileSystem, and you must make sure to dispose of those 
connections over the span of your own code.

$h2 Provided Components

This feature provides the following components and component binders. Scope, 
Types, and Names are provided.

$h3 `FileSystemManager`

A VFS FileSystemManager, used as the singleton source of all filesystems. If 
you want closer control over the lifecycle of your `FileSystem`s, 
or wich to resolve `FileObjects` directly, you may inject this and use it as 
you see fit.

* *Scope:* Singleton
* *Type:* org.apache.commons.vfs2.FileSystemManager


    @Path("/path")
    public class MyService {
    
        @Inject
        public FileSystemManager fsManager;
    
        @GET
        @Produces(MediaType.APPLICATION_JSON)
        public Response getMethod() {
            return Response.ok().build();
        }
    }
